/**
 * CUP specification of the language grammar for a simple demo language.
 * Change this into the language grammar of MiniJava for your implementation.
 *
 * CSE 401/M501/P501 18sp
 */

package Parser;

import AST.*;
import java.util.*;
import java_cup.runtime.*;

/* Terminals (lexical tokens returned by the scanner): */

/* reserved words */
terminal CLASS, MAIN, STRING, TYPE, SYSO, RETURN, THIS, NEW, IF, ELSE, WHILE, NOT, PUBLIC, INT, BOOLEAN;

/* operators */
terminal PLUS, MINUS, MULTI, BECOMES;
terminal AND, LTE;

/* delimiters */
terminal LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE, SEMICOLON;

/* identifiers */
terminal String IDENTIFIER;

/* values */
terminal Integer NUMBER;
terminal Boolean BOOL;


/* Nonterminals (constructed by parser): */

nonterminal List<Statement> Program;
nonterminal Statement Statement;
nonterminal Assign AssignStatement;
nonterminal Exp Expression;
nonterminal Identifier Identifier;
nonterminal MainClass MainClass;
nonterminal CLasssDecl ClassDeclaration;
nonterminal VarDecl VarDeclaration;
nonterminal MethodDecl METHOD_DECLARATION;
nonterminal Type VARTYPE;

/* Precedence declarations: */

precedence left PLUS;


/* Productions: */

Program ::= Statement:s
            {: List<Statement> p = new LinkedList<Statement>();
               p.add(s);
               RESULT = p; :}
        | Program:p Statement:s
            {: p.add(s); RESULT = p; :};
/*MainClass ::= CLASS IDENTFIER:class LBRACE MAIN LPAREN STRING LBRACK RBRACK IDENTIFIER:args;*/

Statement   ::= AssignStatement:s
                {: RESULT = s; :};

AssignStatement ::= Identifier:id BECOMES Expression:expr SEMICOLON
                    {: RESULT = new Assign(id, expr, idxleft); :};

Identifier  ::= IDENTIFIER:id
                {: RESULT = new Identifier(id, idxleft); :};

Expression    ::= IDENTIFIER:name
            {: RESULT = new IdentifierExp(name, namexleft); :}
        | Expression:arg1 PLUS Expression:arg2
            {: RESULT = new Plus(arg1, arg2, arg1xleft); :}
        | LPAREN Expression:expr RPAREN
            {: RESULT = expr; :};
