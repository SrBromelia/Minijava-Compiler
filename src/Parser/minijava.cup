/**
 * CUP specification of the language grammar for a simple demo language.
 * Change this into the language grammar of MiniJava for your implementation.
 *
 * CSE 401/M501/P501 18sp
 */

package Parser;

import AST.*;
import java.util.*;
import java_cup.runtime.*;

/* Terminals (lexical tokens returned by the scanner): */

/* reserved words */
terminal DISPLAY;
terminal SYSO, RETURN, THIS, NEW, IF, ELSE, WHILE, NOT, INT, BOOLEAN, LENGTH, DOT;
terminal CLASS, MAIN, STRING, PUBLIC, EXTENDS;
/* operators */
terminal PLUS, MINUS, TIMES, BECOMES;
terminal AND, LT;

/* delimiters */
terminal LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE, SEMICOLON, COMMA;

/* identifiers */
terminal String IDENTIFIER;

/* values */
terminal Integer INTEGER;
terminal Boolean TRUE,FALSE;


/* Nonterminals (constructed by parser): */

nonterminal Program Program;
nonterminal Statement Statement;
nonterminal Assign AssignStatement;
nonterminal ArrayAssign ArrayAssign;
nonterminal Display DisplayStatement;
nonterminal Exp Expression;
nonterminal ExpList ExpressionList;
nonterminal Identifier Identifier;
nonterminal MainClass MainClass;
nonterminal ClassDeclList ClassDeclList;
nonterminal ClassDecl ClassDecl;
nonterminal VarDeclList VarDeclList;
nonterminal VarDecl VarDecl;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal FormalList FormalList;
nonterminal Formal Formal;
nonterminal Type Type;
nonterminal StatementList StatementList;


/* Precedence declarations: */

precedence left DOT;
precedence left NOT;
precedence left LT;
precedence left AND;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;


/* Productions: */

start with Program;

Program ::= MainClass:mc ClassDeclList:cdl
            {: RESULT = new Program(mc,cdl,mcxleft); :};

MainClass ::= CLASS IDENTIFIER:a LBRACE
              PUBLIC MAIN LPAREN STRING LBRACK RBRACK IDENTIFIER:b RPAREN
              Statement:s RBRACE
            {:  Identifier cl = new Identifier(a,axleft);
                Identifier ag = new Identifier(b,bxleft);
                RESULT = new MainClass(cl, ag, s, axleft); :};

ClassDeclList ::=
            {: ClassDeclList cdl = new ClassDeclList();
               RESULT = cdl; :}
        | ClassDeclList:cdl ClassDecl:cd
            {: cdl.add(cd); RESULT = cdl; :};

ClassDecl ::= CLASS IDENTIFIER:a LBRACE VarDeclList:vdl MethodDeclList:mdl RBRACE
            {: Identifier cl = new Identifier(a,axleft);
               RESULT = new ClassDeclSimple(cl, vdl,mdl,axleft); :}
        | CLASS Identifier:a EXTENDS Identifier:b LBRACE VarDeclList:vdl MethodDeclList:mdl RBRACE
            {: RESULT = new ClassDeclExtends(a,b,vdl,mdl,axleft); :};

VarDeclList ::=
            {: VarDeclList vdl = new VarDeclList();
               RESULT = vdl; :}
        | VarDeclList:vdl VarDecl:vd SEMICOLON
            {: vdl.add(vd);
               RESULT = vdl; :};

VarDecl ::= Type:t IDENTIFIER:var
            {: Identifier id = new Identifier(var,varxleft);
               RESULT = new VarDecl(t,id,txleft); :};

Type ::= INT:l LBRACK RBRACK
            {: RESULT = new IntArrayType(lxleft); :}
        | BOOLEAN:l
            {: RESULT = new BooleanType(lxleft); :}
        | INT:l
            {: RESULT = new IntegerType(lxleft); :}
        | IDENTIFIER:l
            {: RESULT = new IdentifierType(l, lxleft); :};/**/

MethodDeclList ::=
            {: MethodDeclList mdl = new MethodDeclList();
               RESULT = mdl; :}
        | MethodDeclList:mdl MethodDecl:md
            {: mdl.add(md);
               RESULT = mdl; :};

MethodDecl ::= PUBLIC Type:t IDENTIFIER:a LPAREN FormalList:fl RPAREN LBRACE
               VarDeclList:vdl StatementList:sl RETURN Expression:e SEMICOLON RBRACE
            {: Identifier m = new Identifier(a,axleft);
               RESULT = new MethodDecl(t,m,fl,vdl,sl,e,txleft); :}
        | PUBLIC:p Type:t IDENTIFIER:a LPAREN FormalList:fl RPAREN LBRACE
                VarDeclList:vdl RETURN Expression:e SEMICOLON RBRACE
            {:  Identifier m = new Identifier(a,axleft);
                RESULT = new MethodDecl(t,m,fl, vdl, new StatementList(), e,pxleft); :};

FormalList ::= 
            {: RESULT = new FormalList(); :}
        | FormalList:fl Formal:f
            {: fl.add(f);
               RESULT = fl; :};

Formal ::= Type:t IDENTIFIER:a
            {: Identifier id = new Identifier(a,axleft);
               RESULT = new Formal(t,id,txleft); :}
        | Type:t IDENTIFIER:a COMMA
             {: Identifier id = new Identifier(a,axleft);
               RESULT = new Formal(t,id,txleft); :};

StatementList ::= Statement:s
            {: StatementList p = new StatementList(sxleft);
               p.add(s);
               RESULT = p; :}
        | StatementList:p Statement:s
            {: p.add(s); RESULT = p; :};

Statement   ::= LBRACE StatementList:sl RBRACE //{Stmt}
                {: RESULT = new Block(sl,slxleft); :}
            | WHILE:w LPAREN Expression:e RPAREN Statement:s //while(Exp) Stmt
                {: RESULT = new While(e,s,wxleft); :}
            | SYSO LPAREN Expression:e RPAREN SEMICOLON //System.out.println(Exp);
                {: RESULT = new Print(e,exleft); :}
            | IF:iff LPAREN Expression:e RPAREN Statement:s_if ELSE Statement:s_else //if(Exp)Stmt else Stmt
                {: RESULT = new If(e,s_if,s_else,iffxleft);  :}
            | AssignStatement:s //Id=Exp
                {: RESULT = s; :}
            | ArrayAssign:s //Id[Exp]=Exp
                {: RESULT = s; :}
            | DisplayStatement:s //Display Exp - Precisa ser removido
                {: RESULT = s; :};

AssignStatement ::= Identifier:id BECOMES Expression:expr SEMICOLON
                    {: RESULT = new Assign(id, expr, idxleft); :};

ArrayAssign ::= Identifier:id LBRACK Expression:index RBRACK BECOMES Expression:value SEMICOLON
                    {: RESULT = new ArrayAssign(id, index, value, idxleft); :};

Identifier  ::= IDENTIFIER:id
                {: RESULT = new Identifier(id, idxleft); :};

DisplayStatement ::= DISPLAY:d Expression:expr SEMICOLON
                     {: RESULT = new Display(expr, dxleft); :};

ExpressionList ::= Expression:e
            {: ExpList el = new ExpList();
               el.add(e);
               RESULT = el; :}
        | ExpressionList:el COMMA Expression:e
            {: el.add(e);
               RESULT = el; :};

Expression ::= IDENTIFIER:name //id
            {: RESULT = new IdentifierExp(name, namexleft); :}
        | TRUE:t //true
            {: RESULT = new True(txleft); :}
        | FALSE:f //false
            {: RESULT = new False(fxleft); :}
        | NOT Expression:e //!Exp
            {: RESULT = new Not(e,exleft); :}
        | THIS:t //This
            {: RESULT = new This(txleft); :}
        | NEW:n INT LBRACK Expression:e RBRACK //new int[INT]
            {: RESULT = new NewArray(e,nxleft); :}
        | NEW:n Identifier:id LPAREN RPAREN //new ID()
            {: RESULT = new NewObject(id,nxleft); :}
        | Expression:e DOT LENGTH //ID.length
            {: RESULT = new ArrayLength(e, exleft); :}
        | Expression:e DOT Identifier:id LPAREN RPAREN // Exp.Id()
            {: RESULT = new Call(e,id,new ExpList(idxright),exleft); :}
        | Expression:e DOT Identifier:id LPAREN ExpressionList:el RPAREN //Exp.Id(StmtL)
            {: RESULT = new Call(e,id,el,exleft); :}
        | Expression:e1 LBRACK Expression:e2 RBRACK
            {: RESULT = new ArrayLookup(e1,e2,e1xleft); :}
        | INTEGER:integer //int
            {: RESULT = new IntegerLiteral(integer, integerxleft); :}
        | Expression:arg1 PLUS Expression:arg2 //+
            {: RESULT = new Plus(arg1, arg2, arg1xleft); :}
        | Expression:arg1 MINUS Expression:arg2 //-
            {: RESULT = new Minus(arg1, arg2, arg1xleft); :}
        | Expression:arg1 TIMES Expression:arg2 //*
            {: RESULT = new Times(arg1, arg2, arg1xleft); :}
        | Expression:arg1 AND Expression:arg2 //&&
            {: RESULT = new And(arg1, arg2, arg1xleft); :}
        | LPAREN Expression:expr RPAREN
            {: RESULT = expr; :}
        | Expression:arg1 LT Expression:arg2 //<
                   {: RESULT = new LessThan(arg1, arg2, arg1xleft); :};